import React, { useState, useEffect } from 'react'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º useEffect
import { useInView } from 'react-intersection-observer';
import './Body.css';

function Body() {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const services = [
    {
      title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      icon: 'üí¨',
      description: '–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.',
    },
    {
      title: '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Å—É–¥–µ',
      icon: '‚öñÔ∏è',
      description: '–ü–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å—É–¥–µ–±–Ω—ã—Ö –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è—Ö.',
    },
    {
      title: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
      icon: 'üìú',
      description: '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.',
    },
    {
      title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤',
      icon: 'üñäÔ∏è',
      description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤ –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –¥—Ä—É–≥–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ.',
    },
    {
      title: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π',
      icon: 'üõ°Ô∏è',
      description: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –≤ –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π.',
    },
    {
      title: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
      icon: 'üß†',
      description: '–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –ø—Ä–∞–≤–æ.',
    }
  ];
  const [visibleServices, setVisibleServices] = useState([]);
  const [visibleFeatures, setVisibleFeatures] = useState(false); 

  const { ref: servicesRef, inView: servicesInView } = useInView({
    triggerOnce: true,
    threshold: 1.0,
  });

  const { ref: featuresRef, inView: featuresInView } = useInView({
    triggerOnce: true,
    threshold: 1.0,
  });

  useEffect(() => {
    if (servicesInView) {
      setVisibleServices(services.map((_, index) => index));
    }
  }, [servicesInView, services]);

  useEffect(() => {
    if (featuresInView) {
      setVisibleFeatures(true); 
    }
  }, [featuresInView]);

  return (
    <div className="body-container">
      <div className="slogan-section">
        <h2 className="slogan">–í–∞—à –°–ª–æ–≥–∞–Ω –ó–¥–µ—Å—å</h2>
        <button className="action-button">–ù–∞–∂–º–∏ –Ω–∞ –ú–µ–Ω—è</button>
      </div>

      <div className="feature-container" ref={featuresRef}>
        <div className={`feature ${visibleFeatures ? 'visible' : ''}`}>
          <div className="feature-icon">üåü</div>
          <h3 className="feature-title">–î–æ–≤–µ—Ä–∏–µ</h3>
          <p className="feature-description">–û–ø–∏—Å–∞–Ω–∏–µ 1.</p>
        </div>
        <div className={`feature ${visibleFeatures ? 'visible' : ''}`}>
          <div className="feature-icon">üåü</div>
          <h3 className="feature-title">–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å</h3>
          <p className="feature-description">–û–ø–∏—Å–∞–Ω–∏–µ 2.</p>
        </div>
        <div className={`feature ${visibleFeatures ? 'visible' : ''}`}>
          <div className="feature-icon">üåü</div>
          <h3 className="feature-title">–≠—Ç–∏–∫–∞</h3>
          <p className="feature-description">–û–ø–∏—Å–∞–Ω–∏–µ 3.</p>
        </div>
      </div>

      <div className="services-list" ref={servicesRef}>
        {services.map((service, index) => (
          <div className={`service ${visibleServices.includes(index) ? 'visible' : ''}`} key={index}>
            <div className="service-icon">{service.icon}</div>
            <h3 className="service-title">{service.title}</h3>
            <p className="service-description">{service.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Body;
